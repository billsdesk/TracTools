#!/bin/bash
# ===============================================
# tracscript - Helper for managing a local Trac instance
# Author: Bill Stackhouse
# Version: 2.0
# ===============================================

# Load configuration
CONFIG_FILE="$HOME/Trac/TracConfig"
# Normalize paths to full form
TRAC_PROJECT_PATH=$(eval echo "$TRAC_PROJECT_PATH")
VENV_PATH=$(eval echo "$VENV_PATH")
BACKUP_PATH=$(eval echo "$BACKUP_PATH")

if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ö†Ô∏è  Config file not found at $CONFIG_FILE"
  echo "Please create it with contents like:"
  echo "  TRAC_PROJECT_PATH=$TRAC_PROJECT_PATH"
  echo "  VENV_PATH=$HOME/tracenv"
  echo "  BACKUP_PATH=$HOME/Trac/TracBackups"
  echo "  PORT=8080"
  exit 1
fi
source "$CONFIG_FILE"

# Activate Python virtual environment
activate_venv() {
  if [[ -n "$VENV_PATH" && -d "$VENV_PATH" ]]; then
    source "$VENV_PATH/bin/activate"
    echo "üß† Virtual environment active: $VENV_PATH"
  else
    echo "‚ö†Ô∏è  Virtual environment not found at $VENV_PATH"
    exit 1
  fi
}

# Start Trac server
start_trac() {
  activate_venv
  echo "üöÄ Starting Trac on port ${PORT:-8080}..."

  # Suppress pkg_resources warning globally
  export PYTHONWARNINGS="ignore:::pkg_resources"

  # Start tracd, filtering any remaining pkg_resources noise
  "$VENV_PATH/bin/python3" -W ignore:::pkg_resources -m trac.web.standalone \
    --port ${PORT:-8080} \
    --basic-auth=myproject,${TRAC_PROJECT_PATH}/.htpasswd,. \
    "${TRAC_PROJECT_PATH}" 2> >(grep -v "pkg_resources" >&2) &

  sleep 1
  PID=$!
  echo $PID > "${TRAC_PROJECT_PATH}/tracd.pid"
  echo "‚úÖ Started Trac (PID $PID) ‚Üí http://127.0.0.1:${PORT:-8080}/"
}

# Stop Trac server
stop_trac() {
  PID_FILE="${TRAC_PROJECT_PATH}/tracd.pid"
  if [[ -f "$PID_FILE" ]]; then
    PID=$(cat "$PID_FILE")
    echo "üõë Stopping Trac (PID $PID)..."
    kill "$PID" 2>/dev/null && echo "‚úÖ Trac stopped." || echo "‚ö†Ô∏è  Failed to stop Trac."
    rm -f "$PID_FILE"
  else
    echo "‚ö†Ô∏è  No PID file found."
  fi
}

# Restart Trac server
restart_trac() {
  echo "üîÑ Restarting Trac..."
  stop_trac
  start_trac
}

# Backup Trac project (includes tracscript + venv)
backup_trac() {
  activate_venv
  TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
  mkdir -p "$BACKUP_PATH"

  BACKUP_FILE="${BACKUP_PATH}/${TIMESTAMP}-TracBackup.tar.gz"
  echo "üíæ Creating backup at ${BACKUP_FILE} ..."

  SCRIPT_PATH="$(realpath "$0")"

  # Back up project + tracenv + script
  tar -czf "$BACKUP_FILE" \
    -C "$(dirname "$TRAC_PROJECT_PATH")" "$(basename "$TRAC_PROJECT_PATH")" \
    -C "$(dirname "$VENV_PATH")" "$(basename "$VENV_PATH")" \
    -C "$(dirname "$SCRIPT_PATH")" "$(basename "$SCRIPT_PATH")" \
    2>/dev/null

  echo "‚úÖ Backup complete: $BACKUP_FILE"

  # Keep only the 5 most recent backups
  echo "üßπ Pruning old backups (keeping 5 most recent)..."
  ls -tp "$BACKUP_PATH"/*.tar.gz 2>/dev/null | tail -n +6 | while read -r f; do
    echo "   üóëÔ∏è  Removing $f"
    rm -f "$f"
  done
}

# Restore Trac project (excluding venv + script)
restore_trac() {
  if [[ -z "$1" ]]; then
    echo "Usage: tracscript restore <backup-file>"
    exit 1
  fi
  BACKUP_FILE="$1"

  echo "‚ôªÔ∏è  Restoring backup from $BACKUP_FILE ..."
  if [[ ! -f "$BACKUP_FILE" ]]; then
    echo "‚ùå Backup file not found: $BACKUP_FILE"
    exit 1
  fi

  # Extract only the Trac project directory
  tar --exclude="*tracenv*" \
      --exclude="$(basename "$0")" \
      -xzf "$BACKUP_FILE" -C "$(dirname "$TRAC_PROJECT_PATH")"
  echo "‚úÖ Restore complete (excluded tracenv and script)."
}

# Update ticket creation date
set_created() {
    activate_venv
    if [[ $# -lt 2 ]]; then
        echo "Usage: tracserve set-created <ticket-id> <YYYY-MM-DD>"
        exit 1
    fi

    local ticket_id=$1
    local date_input=$2
    local datetime_str="${date_input} 09:00:00"

    echo "üìù Setting ticket #${ticket_id} created date to '${datetime_str}' ..."

    python3 -W ignore <<PYTHON
from trac.env import Environment
from trac.util.datefmt import to_utimestamp
from datetime import datetime, timezone
import os

env_path = "${TRAC_PROJECT_PATH}"
print(f"üìÇ Using Trac environment at: {env_path}")

if not env_path or not os.path.exists(env_path):
    raise FileNotFoundError(f"Trac environment not found at {env_path}")

env = Environment(env_path)

ticket_id = ${ticket_id}
new_dt = datetime.strptime("${datetime_str}", "%Y-%m-%d %H:%M:%S").astimezone(timezone.utc)
new_ts = to_utimestamp(new_dt)

with env.db_transaction as db:
    db.execute("UPDATE ticket SET time=%s WHERE id=%s", (new_ts, ticket_id))
    db.execute("UPDATE ticket SET changetime=%s WHERE id=%s", (new_ts, ticket_id))

print(f"‚úÖ Updated ticket #{ticket_id} created date to {new_dt.astimezone().strftime('%Y-%m-%d %H:%M:%S %Z')} (stored as UTC)")
PYTHON
}

# Help
show_help() {
cat <<EOF
Usage: tracscript <command>

Commands:
  start             Start the Trac server
  stop              Stop the Trac server
  restart           Restart the Trac server
  backup            Create a timestamped backup (includes script + venv)
  restore <file>    Restore from backup (excludes script + venv)
  set-created <id> <YYYY-MM-DD>
                    Update the 'created' date of a ticket (defaults to 09:00)
  help              Show this help message

Config file:
  TracConfig (in ~/Trac)
    TRAC_PROJECT_PATH=$HOME/Trac/myproject
    VENV_PATH=$HOME/tracenv
    BACKUP_PATH=$HOME/Trac/TracBackups
    PORT=8080
EOF
}

# Command dispatcher
case "$1" in
  start) start_trac ;;
  stop) stop_trac ;;
  restart) restart_trac ;;
  backup) backup_trac ;;
  restore) restore_trac "$2" ;;
  set-created) shift; set_created "$@" ;;
  help|--help|-h|"") show_help ;;
  *) echo "‚ùå Unknown command: $1"; show_help ;;
esac
